import sys,os ; sys.path.insert(0,os.path.dirname(os.path.dirname(__file__)))
from src.credentials import Config ; get = Config()
from src.logs import Log ; log = Log(get)
from waitress import serve
from flask import Flask
from time import sleep
import pandas as pd
import smbclient
import cx_Oracle 
import requests
import pypyodbc
import psycopg2
import logging
import urllib3
import _thread
import time
import json
import pika
import uuid
import sys
import os

loggger = logging.getLogger('werkzeug')
loggger.setLevel(logging.ERROR)
urllib3.disable_warnings()
init_config = Config()
app = Flask(__name__)
start_exec = False
rabbit_conn = None
rabbit_id = None

class Report():

    def __init__(self): 
        
        #Initial header
        self.header = 'SAMACCOUNTNAME;FIRST_NAME;LAST_NAME;E_MAIL;SG_DOMIN_USUA;DESCR;MANAGER;COMPANY;DEPARTMENT;GSB_DESC_LOC2;NATIONALITY_CD_BRA;GSB_DESC_MUN1;POSTAL;PHONE;GSB_DESCR_CCUSTO;GSB_CD_UNIORG;NM_USUA_STAT;EMPLID;ORGANIZ;DEPATAMENT;GSB_SIT_REAL;GSB_ID_CORP;USER_PRINCIPAL_NAME;MATCORP;MANAGER_LEVEL;EMAIL_ADDR;TIMEZONE;'

        #Assistants
        self.list_progress = [True,True,True,True,True,True,True]
        self.peoplesoft_nationality_cd_bra = []
        self.peoplesoft_gsb_descr_ccusto = []
        self.peoplesoft_manager_level = []
        self.peoplesoft_gsb_desc_loc2 = []
        self.peoplesoft_gsb_desc_mun1 = []
        self.peoplesoft_gsb_cd_uniorg = []
        self.peoplesoft_gsb_sit_real = []
        self.peoplesoft_nm_usua_stat = []
        self.peoplesoft_gsb_id_corp = []
        self.peoplesoft_email_addr = []
        self.peoplesoft_department = []
        self.peoplesoft_manager = []
        self.peoplesoft_company = []   
        self.peoplesoft_postal = []     
        self.peoplesoft_emplid = []
        self.peoplesoft_descr = []
        self.peoplesoft_phone = [] 
        self.dbad_nm_ip_phone = []
        self.cos_registration = []
        self.list_connection = []
        self.peoplesoft_name = [] 
        self.report_values = []
        self.dbad_nm_domi = []
        self.dbad_nm_upn = []
        self.dbad_query = []
        self.cos_query = []
        self.nm_domi = []
        self.nm_upn = []
        
        #Init credentials instance
        os.environ['id'] = uuid.uuid4().hex
        self.config = Config()

    def report_flow(self,reference,variation,destinatario):
        try:
            """ Especificação Relatório ITSM - Funcionários 
            
            Disponivel em: https://confluence.santanderbr.corp/pages/viewpage.action?pageId=275984634 """

            log.send_sgl_log('Execucao iniciada','Executando','Sucesso')

            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Execucao iniciada','running')

            ### Consulta peoplesoft - Documentação 3.1 | 3.1.2 ###
 
            peoplesoft_connection = self.oracle_connection(self.config.peoplesoft_server,self.config.peoplesoft_user,self.config.peoplesoft_pass)

            if peoplesoft_connection == None: 
                
                log.send_sgl_log('Nao foi possivel estabelecer uma conexao com o servidor','Executando','Falha') 

                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Nao foi possivel estabelecer uma conexao com o servidor','running')

                return False

            peoplesoft = self.oracle_query(peoplesoft_connection,self.config.peoplesoft_server)

            if peoplesoft == None: 
                
                log.send_sgl_log('Problema ao realizar consulta no banco de dados','Executando','Falha') 
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Problema ao realizar consulta no banco de dados','running')

                return False

            #Copies the information collected from the database and stores it in lists  
            for value in peoplesoft: 
                self.peoplesoft_nationality_cd_bra.append(value[10])
                self.peoplesoft_gsb_descr_ccusto.append(value[14])
                self.peoplesoft_gsb_desc_mun1.append(value[11])
                self.peoplesoft_gsb_cd_uniorg.append(value[15])
                self.peoplesoft_manager_level.append(value[25])
                self.peoplesoft_gsb_sit_real.append(value[21])
                self.peoplesoft_gsb_desc_loc2.append(value[9])
                self.peoplesoft_nm_usua_stat.append(value[16])
                self.peoplesoft_gsb_id_corp.append(value[22])
                self.peoplesoft_email_addr.append(value[26])
                self.peoplesoft_department.append(value[8])
                self.peoplesoft_manager.append(value[6])
                self.peoplesoft_company.append(value[7])
                self.peoplesoft_postal.append(value[12])
                self.peoplesoft_emplid.append(value[17])
                self.peoplesoft_phone.append(value[13])
                self.peoplesoft_name.append(value[18])
                self.peoplesoft_descr.append(value[5])
  
            #Terminates connection with database
            self.close_connection(peoplesoft_connection,self.config.peoplesoft_server)      
    
            ### Consulta COS - Documentação 3.2 | 3.2.2 ###

            cos_connection = self.sql_connection(self.config.cos_server,self.config.cos_database,self.config.cos_port,self.config.cos_user,self.config.cos_pass)

            if cos_connection == None: 
                
                log.send_sgl_log('Nao foi possivel estabelecer uma conexao com o servidor','Executando','Falha')
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Nao foi possivel estabelecer uma conexao com o servidor','running')

                return False

            cos_values = self.sql_query(cos_connection,self.config.cos_server,'COS')

            if cos_values == None: 
                
                log.send_sgl_log('Problema ao realizar consulta no banco de dados','Executando','Falha') 
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Problema ao realizar consulta no banco de dados','running')

                return False

            #Copies the information collected from the database and stores it in list
            for value in cos_values: 
                self.cos_registration.append(value[0])
                self.cos_query.append(value)

            #Create series
            cos_series = pd.Series(self.cos_registration)                  
                
            #Terminates connection with database
            self.close_connection(cos_connection,self.config.cos_server)

            ### Consulta AD - Documentação 3.3 | 3.3.2 ###

            dbad_connection = self.postgre_connection(self.config.dbad_server,self.config.dbad_database,self.config.dbad_port,self.config.dbad_user,self.config.dbad_pass)

            if dbad_connection == None: 
                
                log.send_sgl_log('Nao foi possivel estabelecer uma conexao com o servidor','Executando','Falha') 
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Nao foi possivel estabelecer uma conexao com o servidor','running')

                return False

            dbad = self.sql_query(dbad_connection,self.config.dbad_server,'DBAD')

            if dbad == None: 
                
                log.send_sgl_log('Problema ao realizar consulta no banco de dados','Executando','Falha') 
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Problema ao realizar consulta no banco de dados','running')

                return False

            #Copies the information collected from the database and stores it in lists   
            for value in dbad: self.dbad_query.append(value)

            for value in self.dbad_query: 
                self.dbad_nm_ip_phone.append(value[1])
                self.dbad_nm_domi.append(value[2])
                self.dbad_nm_upn.append(value[0])

            #Create series
            dbad_series = pd.Series(self.dbad_nm_ip_phone)

            #Terminates connection with database
            self.close_connection(dbad_connection,self.config.dbad_server)

            ### Consulta FX - Documentação |  ###
            fx_connection = self.sql_connection(self.config.fx_server,self.config.fx_database,self.config.fx_port,self.config.fx_user,self.config.fx_pass)

            if fx_connection == None: 
                
                log.send_sgl_log('Nao foi possivel estabelecer uma conexao com o servidor','Executando','Falha') 
                
                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Nao foi possivel estabelecer uma conexao com o servidor','running')

                return False 

            ### Gerar arquivo - Documentação 3.4 ###

            log.send_sgl_log('Iniciando coleta de informacoes','Executando','Sucesso')

            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Iniciando coleta de informacoes','running')   

            for counter in range(len(self.peoplesoft_emplid)):
     
                if self.peoplesoft_emplid[counter] in self.cos_registration:

                    #Get index
                    list_match = list(cos_series[cos_series == self.peoplesoft_emplid[counter]].index)

                    if len(list_match) > 1:
                        
                        index = list_match[0]

                        for match in list_match:

                            if self.cos_query[match][3][:1].upper() == 'T' and self.cos_query[match][3][1:].isdigit() and self.cos_query[match][4] == 'BSBR':
                                index = match ; break                                     
                    else:
                        index = list_match[0]
                    
                    #Samaccountname
                    samaccountname = self.cos_query[index][3]

                    check_string_samaccountname = samaccountname[:5]

                    if check_string_samaccountname.upper() == 'CLOUD': samaccountname = samaccountname[5:]

                    #First name
                    first_name = self.peoplesoft_name[counter].split(' ')[0]

                    #Last name
                    last_name = self.peoplesoft_name[counter].replace(first_name,'').strip()

                    #Email
                    if not self.cos_query[index][5] == None and not self.cos_query[index][5] == '': 
                        e_mail = self.cos_query[index][5].replace(';','.')
                    else:
                        e_mail = self.peoplesoft_email_addr[counter].replace(';','.')   

                    #Sg domin usua 
                    if self.cos_query[index][4] == 'AGBANESPA':
                        sg_domin_usua = 'BSBR'
                    else:
                        sg_domin_usua = self.cos_query[index][4]

                    #Descr
                    descr = self.peoplesoft_manager_level[counter] + '-' + self.peoplesoft_descr[counter]

                    #Checks if the return is equal to a service specialist or young apprentice and if the company is equal to sx negocios, when found it discards the record
                    if descr.upper() == '9-ESPECIALISTA DE ATENDIMENTO E' or descr.upper() == '9-JOVEM APRENDIZ TF' or descr.upper() == '9-JOVEM APRENDIZ' or descr.upper() == '9-ESPECIALISTA DE CX E NEGOCIOS' and self.peoplesoft_company[counter].upper() == 'SX NEGOCIOS LTDA': 
                        continue

                    #Manager 
                    manager = self.peoplesoft_manager[counter]

                    #Check getnet and discard the record when found
                    if self.peoplesoft_company[counter].upper().find('SANTANDER GETNET SERV M PAG AS') != -1: 
                        continue
                    if self.peoplesoft_company[counter].upper().find('SUPERDIGITALINSTITUIÇÃODEPAGAM') != -1: 
                        continue                    
                    if self.peoplesoft_company[counter].upper().find('SUPERDIGITAL INSTITUICAO DE PA') != -1: 
                        continue   
                    if self.peoplesoft_company[counter].upper().find('PAGONXT MERCHANT SOLUCOES TECN') != -1: 
                        continue                     

                    #Company 
                    company = self.treatment_company(self.peoplesoft_company[counter].upper())
                    #company = self.peoplesoft_company[counter].upper()

                    if e_mail.find('santanderam.com') != -1: 
                        company = 'SAM BR'
                    elif self.cos_query[index][0] in self.config.get_scib_table:
                        company = 'SCIB Brasil'
                      
                    #Department
                    department = self.peoplesoft_department[counter]

                    #Gsb desc loc2
                    gsb_desc_loc2 = self.peoplesoft_gsb_desc_loc2[counter]

                    #Nationality cd_bra 
                    nationality_cd_bra = self.peoplesoft_nationality_cd_bra[counter]

                    #Gsb desc mun1
                    gsb_desc_mun1 = self.peoplesoft_gsb_desc_mun1[counter]  

                    #Postal
                    postal = self.peoplesoft_postal[counter]

                    #Phone
                    phone = self.peoplesoft_phone[counter]

                    #Gsb descr ccusto
                    gsb_descr_ccusto = self.peoplesoft_gsb_descr_ccusto[counter] 

                    #Gsb cd uniorg
                    if str(self.peoplesoft_gsb_cd_uniorg[counter])[:3] == '015':

                        value_1 = str(self.peoplesoft_gsb_cd_uniorg[counter])[:3]
                        value_2 = str(self.peoplesoft_gsb_cd_uniorg[counter])[3:]

                        fx_values = self.sql_query(fx_connection,self.config.fx_server,'FX',value_1,value_2)

                        if fx_values == None: 
                            
                            log.send_sgl_log('Problema ao realizar consulta no banco de dados','Executando','Falha') 
                            
                            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Problema ao realizar consulta no banco de dados','running')

                            return False

                        for fx_value in fx_values:
                            tp_uor = fx_value[0]
                            cd_uor = fx_value[1]
                            break

                        if len(str(tp_uor)) == 3:                     
                            pass
                        else:
                            count = 3 - len(str(tp_uor))
                            for x in range(count):
                                tp_uor = '0' + str(tp_uor)

                        if len(str(cd_uor)) == 4:                     
                            pass
                        else:
                            count = 4 - len(str(cd_uor))
                            for x in range(count):
                                cd_uor = '0' + str(cd_uor) 

                        gsb_cd_uniorg = (str(tp_uor) + str(cd_uor))

                    else:
                        gsb_cd_uniorg = self.peoplesoft_gsb_cd_uniorg[counter]                   

                    #Nm usua stat
                    nm_usua_stat = self.peoplesoft_nm_usua_stat[counter].upper()
                    
                    if nm_usua_stat == 'A' or nm_usua_stat == 'P' or nm_usua_stat == 'W':
                       nm_usua_stat = 'Ativo'
                    else:
                        nm_usua_stat = 'Inativo'    

                    #Emplid
                    emplid = self.peoplesoft_emplid[counter] 

                    #Organiz
                    if len(gsb_cd_uniorg) >= 3:

                        if int(gsb_cd_uniorg[:3]) < 100:
                            organiz = 'Ponto de Venda'
                        else:
                            organiz = 'Corporativo'
                    else:
                        organiz = '' 

                    #Depatament
                    if len(gsb_cd_uniorg) >= 3:

                        if int(gsb_cd_uniorg[:3]) < 100:
                            depatament = 'Agencia/PAB'
                        elif int(gsb_cd_uniorg[:3]) == 112:
                            depatament = 'Regional'
                        else:
                            depatament = 'Corporativo'    
                    else:
                        depatament = ''

                    #Gsb sit real
                    gsb_sit_real = self.peoplesoft_gsb_sit_real[counter]  

                    #Gsb id corp
                    gsb_id_corp = self.peoplesoft_gsb_id_corp[counter]  

                    #User principal name                   
                    if 'F' + emplid[-6:] in self.dbad_nm_ip_phone:

                        list_index = list(dbad_series[dbad_series == 'F' + emplid[-6:]].index)
                        
                        for i in list_index:   
                            self.nm_upn.append(self.dbad_nm_upn[i])  
                            self.nm_domi.append(self.dbad_nm_domi[i])
     
                        if len(self.nm_upn) > 1:
                            
                            if organiz == 'Ponto de Venda':
                                for x in range(len(self.nm_domi)):
                                    if self.nm_domi[x] == 'AGBANESPA': 
                                        nm_upn = self.nm_upn[x] ; break
                            else:                       
                                for k in range(len(self.nm_domi)):
                                    if self.nm_domi[k] == 'BSBR':
                                        nm_upn = self.nm_upn[k] ; break
                                    else:
                                        nm_upn = ''
                        else:
                            nm_upn = self.nm_upn[0]

                        check_string_user_principal_name = nm_upn[:5]
                        
                        if check_string_user_principal_name.upper() == 'CLOUD':  
                            user_principal_name = nm_upn[5:].upper()
                        else:
                            user_principal_name = nm_upn.upper()
                    else:
                        continue    

                    #Matcorp                 
                    if not gsb_id_corp == None and not gsb_id_corp == '':
                        matcorp = 'N' + gsb_id_corp
                    else:
                        matcorp = 'N'

                    #Manager level
                    manager_level = self.peoplesoft_manager_level[counter]

                    #Email addr
                    email_addr = self.peoplesoft_email_addr[counter].replace(';','.') 

                    #Timezone
                    timezone = 'America/Sao_Paulo'

                    #self.report_values.append(samaccountname.strip() + ';' + first_name.strip() + ';' + last_name.strip() + ';' + e_mail.strip() + ';' + sg_domin_usua.strip() + ';' + descr.strip() + ';' + manager.strip() + ';' + company.strip() + ';' + department.strip() + ';' + gsb_desc_loc2.strip() + ';' + nationality_cd_bra.strip() + ';' + gsb_desc_mun1.strip() + ';' + postal.strip() + ';' + phone.strip() + ';' + gsb_descr_ccusto.strip() + ';' + gsb_cd_uniorg.strip() + ';' + nm_usua_stat.strip() + ';' + emplid.strip() + ';' + organiz.strip() + ';' + depatament.strip() + ';' + gsb_sit_real.strip() + ';' + gsb_id_corp.strip() + ';' + user_principal_name.strip() + ';' + matcorp + ';' + manager_level.strip() + ';' + email_addr.strip() + ';' + timezone.strip())
                    self.report_values.append(samaccountname.strip() + ';' + first_name.strip() + ';' + last_name.strip() + ';' + e_mail.strip() + ';' + sg_domin_usua.strip() + ';' + descr.strip() + ';' + manager.strip() + ';' + company.strip() + ';' + department.strip() + ';' + gsb_desc_loc2.strip() + ';' + nationality_cd_bra.strip() + ';' + gsb_desc_mun1.strip() + ';' + postal.strip() + ';' + phone.strip() + ';' + gsb_descr_ccusto.strip() + ';' + gsb_cd_uniorg.strip() + ';' + nm_usua_stat.strip() + ';' +  gsb_id_corp.strip()+ ';' + organiz.strip() + ';' + depatament.strip() + ';' + gsb_sit_real.strip() + ';' + gsb_id_corp.strip() + ';' + user_principal_name.strip() + ';' + matcorp + ';' + manager_level.strip() + ';' + email_addr.strip() + ';' + timezone.strip())

                    #Clear lists
                    self.nm_domi.clear() ; self.nm_upn.clear()

                #Progress logs
                buffer = int(((counter * 100) / len(self.peoplesoft_emplid)))
                if (counter + 1) == len(self.peoplesoft_emplid):
                    buffer = 100    
                if os.environ.get('ENVIRONMENT') == None:
                    print("\r-> Progresso - " + str(buffer) + " %", end = '')

                if buffer == 5 and self.list_progress[0]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[0] = False 
                
                if buffer == 15 and self.list_progress[1]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[1] = False 
                    
                if buffer == 30 and self.list_progress[2]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[2] = False                     
                
                if buffer == 45 and self.list_progress[3]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[3] = False                     
                
                if buffer == 60 and self.list_progress[4]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[4] = False                     
                
                if buffer == 75 and self.list_progress[5]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[5] = False

                if buffer == 90 and self.list_progress[6]:

                    log.send_sgl_log('Coletando informações - ' + str(buffer) + ' %','Executando','Sucesso')  

                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Coletando informações - ' + str(buffer) + ' %','running')

                    self.list_progress[6] = False

            print(' - Concluido!')

            #Terminates connection with database
            self.close_connection(fx_connection,self.config.fx_server)

            #Connect servers
            directories = self.config.get_directory.copy()
            
            for server in range(len(self.config.get_network_acronym)):

                log.send_sgl_log('Iniciando conexao smb com o servidor ' + self.config.get_network_acronym[server],'Executando','Sucesso')  

                send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Iniciando conexao smb com o servidor ' + self.config.get_network_acronym[server],'running') 

                #Smb connection 
                smb_conn = self.smb_connection(self.config.get_user.decode('utf-8'),self.config.get_password.decode('utf-8'),self.config.get_network_acronym[server])

                if smb_conn == None:              
                    self.config.get_directory.remove(directories[server])
                else:                
                    self.list_connection.append(smb_conn) 

            log.send_sgl_log('Conexao smb realizada com sucesso','Executando','Sucesso') 

            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Conexao smb realizada com sucesso','running') 

            #Remove old backup
            if not self.remove_file(self.config.get_directory,'Funcionarios_sn.txt.bak'): raise Exception

            #Rename report file
            if not self.rename_file(self.config.get_directory,'Funcionarios_sn.txt','Funcionarios_sn.txt.bak'): raise Exception

            log.send_sgl_log('Gerando relatorio','Executando','Sucesso')  

            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Gerando relatorio','running') 

            #Create report header
            if not self.report_header_creation(self.config.get_directory,'Funcionarios_sn.txt',self.header): raise Exception  

            #Fill out report
            if not self.report_generation(self.config.get_directory,'Funcionarios_sn.txt',self.report_values): raise Exception

            log.send_sgl_log('Relatorio finalizado com sucesso','Executando','Sucesso')

            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Relatorio finalizado com sucesso','running')               
            
            #Validates report variation           
            evaluetion = len(self.report_values) - reference

            if str(evaluetion).find('-') != -1:
                aux_message = 'menos'    
            else:
                aux_message = 'mais'

            if abs(evaluetion) > variation:
            
                records = str(evaluetion).replace('-','')

                message = '<!DOCTYPE html  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">  <title>E-mail enviado via Plataforma de Autosserviço</title>  <style>    body,    table,    #conteudo {      width: 100%;      height: 100%;      font-family: "Poppins", "Arial", sans-serif;    }    body, * {      font-family: "Poppins", "Arial", sans-serif;    }    @import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");  </style>  <meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body style="margin: 0; padding: 0;">  <table align="center" border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse; font-family: "Poppins", sans-serif;">    <tr>      <td bgcolor="#0f121d" style="padding: 10px 15px 10px 15px;">        <table border="0" cellpadding="0" cellspacing="0" width="100%">          <tr>            <td width="75%" style="color: #D1D1D1; font-family: "Poppins", sans-serif;"> <span>E-mail enviado via                Plataforma de Autosserviço</span> </td>            <td width="25%" align="right"> <a href="https://aie.paas.santanderbr.corp/"> <img src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEMAAAAZCAYAAABq35PiAAAACXBIWXMAAAsSAAALEgHS3X78AAAE8ElEQVRYhdVZXWgcVRQ+TTYV28XE1hAQJNMVRL1iFiooGJJZ//BBySpKt/qyRdCmzcNGIj4FtyAFa9UF11afTFBwKWi3D76I4F1ffE3BG0FQZ9UHQy3dQLZZOrOunMmZyd3ZOz+72RT6wTCzc+6de+8353zn3Nk9rVYLgpApGiNoLs1ptUzRSAPARWqeKs1pPFM0NACooT3wQbcAAsnIFI0sABQAwACAHB0zZL4EAEt0IHKlOW3pFlizL2Ihdh0AhgFgAgB+8NhmJGIQyZs0511DGBle168AAKdrJGpasqH3oDclS3PaSpQJCyHKHkK9WGeMjSj6YWj+oWh/iDFmCCGwz7Uoc5BQ6QgT0gAc6DJ5BKLy6kTj08SB5v3kAThY4ee12I2Lq7e9Li1onTzJ1pMIZAQL1hZSjLG2ZwkhdIWngtM2wB6EyoDCWKCzTUR8b+urxVSdJw40j5NXcMYYDpZ7aMw6vZiqo04sU59hOufCRhZCRA0rrctF9QwVGXl6w4jqycc28XqFiMDzkhACF1sm8SwgWeRJQH3zESYUlYybpUW1Ds3AeM8UDYM8I793sKWTHmRp8UhImppz0o4CHZ9Tmo2iGXrESfaTjDsZY74lQJtnYB2RKRorkla43iCFT5bOI2TPk9CW6f54pmi0KC0HQeX+lxT3phX3ekIQEeDNJo+Pm5nYQMshAqY001kQJxJqUjYB8pAGAPyzmKrnfjSGXIP1355npRpEBe8iK0R8R3bB7IFZol+k+MElQwiRfiIBRzzt3unmYVOaKf88IoQoMcbK3naUGr1wiFaNmXRS927CJWNjY+O1eDzeNtTqL792NfSDD9zX9ntzc3NeCh8ZKjJWAhac9HlOVxBC+KX7Ar40mwzOeXZwcPA5x1K/fh1OvfsBVP/82/59b0KD335XzzO+f7993qjXYfSug7AwPwva+D32vUajMcU5z+m6XvB0U4knp4JJNUxUsQ2Dn/4gSWVHQGvNZhOcAmz5iwsuEW+9eRLOf3wGnnmqcz5IxNn38vaB11f+vQrLX15w7ZZlAQmtF6oM4YhbJWL7vmOAc44ieEKavL0oBBLw9JNbZC7Mn4CxsdG28WffyELi0Lh94DVIoWWarn6k0Ts8E+8IE8aYk45VaXnYR2f6ihhlhFUAeNQ0zTuGhoZsd0d89z2HiYeZTcjZj87B2tqVtrHPf7Zkh5BzjXjk8FYycogFgJ+kWsTBhHcRUjz7LbofIvqCYr8FznNjuq7br5RznrQsy3aDl198HozqX3aovP/hJ/BN+VulZqBOLLydd6/37bvd7gvbZFR1XZ+V+9C+QYWwemLHIqrKbDLkOiNtmuY5ADg6OnoQzpxe3FE2sSzra4wuRbNe479fIuoLlwxd19F9XhFC3O28JW+q7AKXJycnX/Jp3mvs77qIqjZqWWmj1iuCSnHVojCDpKTjlKJNNyKq1Bb6zuGLjo0a5focbbp6wTEpM6ig0oay/M1CCGHspBKlNVRxn+QxXRNCqFI3oqbyDHwYpoZjPRCxTH2VCPiG0UYe7UNU3tlNqPhVm9M+x4ySDGgnJErIrJNHhO1UI5ERcK8bEe3647QvGbBNiEZfslSkrJMtGeQREpRk+GytVeHg9A/9W4LCDuuKaoR52Qj930SGt0bwfpuM0B+J9YpgTaUxYW1V9YrffAJqm20AwP+MbuAzq9hmagAAAABJRU5ErkJggg==" alt="AIE" width="67" height="25"> </a> </td>          </tr>        </table>      </td>    </tr>    <tr>      <td bgcolor="#5793df" style="padding: 10px 15px 10px 15px; color: #ffffff; font-size: 13px;">        <h2>Relatório ITSM Funcionários</h2>      </td>    </tr>    <tr id="conteudo">      <td bgcolor="#ffffff" style="padding: 30px 15px 30px 15px; color: #0F121D; font-size: 15px;"> Relatório apresentou variação de ' + records + ' registros a ' + aux_message + ' em relação ao valor de referência. </td>    </tr>    <tr>      <td bgcolor="#0f121d" align="right" style="padding: 10px 15px 10px 15px;"> <img src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAC0AAAARCAYAAABJoiVMAAAACXBIWXMAAAsSAAALEgHS3X78AAAB0UlEQVRIidVW7W3CQAx9rvgPUgYoI4QJGiZouwEblE5A2KAj0A2yQcMGMEHpf04KE7gyspF1yicgVX2SReLz+d692HcQM+M/IBBNE+aDUH0YwHcCIPvD/W0CkXBAl9IvakL2UX00ZCVdKAeQqqsCUCTMQmIBYNo0N2HORWEhDOAJwF64dJEuNdijN+lAJEQLt2HDNmHOAlFdfk+aApEI9uXcs1HHuoXuUpJ/9yXrsHSEZ1picOpabsFKfz8BHNSEeBmIbO5B6npII1rgEKUvSopqHbGWfy5E22JHuutFw3jeMjerGd+oGQojHYjkeWknwE1g5oybAWcG8+UNswpmnljcESiPADuT90mUG248i8dii4+8ubNZTzG2WjLv+v6stXyGNByAV42DKt/6+TsRKd22wyalS+cranxezbxJ0SFKx6eHvzwuHdwTqZu/0zqWfqkS5srlvBkxaX8erjsa0ZDq55bfsfqsGaXBV4Fo62IFp64Tog0x6bV7jpOuUY9xdEHMTWmnrB//0Vv2egyo6dispneao9L3ZU0tZ0cgHZi/9+lxDSr9Kh86N3c33xlSCgnz7g5rnXEP0gYhfdJy6dMLV+OepEVxU/ut7d/bTQDwC9oHFKUjN5mMAAAAAElFTkSuQmCC" width="45" height="17"> </td>    </tr>  </table></body></html>'    

                self.send_api_email_execution(message,'Relatório ITSM Funcionários - Desvio na Quantidade de Registros','portalaie@santander.com.br',destinatario)

            return True
        except Exception as error:
            log.send_sgl_log('Um problema ocorreu durante a execucao do IPA: ' + str(error),'Fim','Falha')
            os._exit(0)

    def send_api_email_execution(self,email_message,subject_matter,email_from,email_to,Cc=None,file_name=None,attachment=None,type=None):
        try:
            
            """ Realiza o envio de email """

            log.send_sgl_log('Realizando envio de e-mail','Executando','Sucesso')
            datainput = {
                "email_message" : email_message,
                "subject_matter": subject_matter,
                "email_from": email_from,
                "email_to": email_to,
                "file_name": file_name,
                "Cc": Cc,
                "type": type
            }
            files = [
                ('email', ('email', json.dumps(datainput), 'application/json')),
            ]         
            r = requests.post(self.config.email_api,files=files,timeout=5,verify=False)  
            if not r.ok: raise Exception        
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
        finally:
            return True

    def oracle_connection(self,server,username,password,encoding='UTF-8'):
        
        """ Realiza conexão no banco de dados Oracle """
        
        log.send_sgl_log('Realizando conexao com o servidor ' + server,'Executando','Sucesso')
        send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Realizando conexao com o servidor ' + server,'running')
        for i in range(3):
            try:
                connection = cx_Oracle.connect(username,password,server,encoding=encoding)
                return connection
            except Exception as error:
                message = error ; sleep(3) ; continue
        log.send_sgl_log(str(message),'Executando','Falha')
        return None

    def oracle_query(self,connection,server):
        
        """ Realiza consulta no banco de dados Oracle """
        
        log.send_sgl_log('Realizando consulta no servidor ' + server,'Executando','Sucesso')
        send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Realizando consulta no servidor ' + server,'running')
        try:
            cursor = connection.cursor()
            values = cursor.execute("""SELECT '' as SAMACCOUNTNAME, 
            '' as FIRST_NAME, 
            '' as LAST_NAME, 
            '' as E_MAIL, 
            '' as SG_DOMIN_USUA, 
            "PS_GSB_PADRAO_01"."DESCR", 
            "PS_GSB_PADRAO_01"."SUPERVISOR_ID" as MANAGER, 
            "PS_GSB_PADRAO_01"."DESCR2" as COMPANY, 
            "PS_GSB_PADRAO_01"."GSB_DESCR_DEPTID" as DEPARTMENT, 
            "PS_GSB_PADRAO_01"."GSB_DESC_LOC2", 
            "PS_GSB_PADRAO_01"."NATIONALITY_CD_BRA", 
            "PS_GSB_PADRAO_01"."GSB_DESC_MUN1", 
            "PS_GSB_PADRAO_01"."POSTAL", 
            "PS_GSB_PADRAO_01"."PHONE" as PHONE, 
            "PS_GSB_PADRAO_01"."GSB_DESCR_CCUSTO", 
            "PS_GSB_PADRAO_01"."GSB_CD_UNIORG", 
            "PS_GSB_PADRAO_01"."EMPL_STATUS" as NM_USUA_STAT, 
            "PS_GSB_PADRAO_01"."EMPLID", 
            "PS_GSB_PADRAO_01"."NAME", 
            "PS_GSB_PADRAO_01"."GSB_CD_UNIORG" as ORGANIZ, 
            "PS_GSB_PADRAO_01"."GSB_CD_UNIORG" as DEPATAMENT, 
            "PS_GSB_PADRAO_01"."GSB_SIT_REAL", 
            "PS_GSB_PADRAO_01"."GSB_ID_CORP", 
            '' as USER_PRINCIPAL_NAME, '' as MATCORP, 
            "PS_GSB_PADRAO_01"."MANAGER_LEVEL", 
            "PS_GSB_PADRAO_01".EMAIL_ADDR
            FROM "PSOFTADM"."PS_GSB_PADRAO_01" "PS_GSB_PADRAO_01" 
            WHERE EMPL_STATUS='A' AND GSB_SIT_REAL = 'N'""")
            return values
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return None

    def sql_connection(self,server,database,port,username,password):
        
        """ Realiza conexão no banco de dados SQL """
        
        log.send_sgl_log('Realizando conexao com o servidor ' + server,'Executando','Sucesso')
        send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Realizando conexao com o servidor ' + server,'running')
        for i in range(3):
            try:       
                connection = pypyodbc.connect('DRIVER={SQL Server}; SERVER=' + server + ',' + port + '; DATABASE=' + database + '; UID=' + username.decode() + '; PWD=' + password.decode())
                return connection
            except Exception as error:
                message = error ; sleep(3) ; continue
        log.send_sgl_log(str(message),'Executando','Falha')
        return None

    def postgre_connection(self,server,database,port,username,password):
    
        """ Realiza conexão no banco de dados Postgre """
        
        log.send_sgl_log('Realizando conexao com o servidor ' + server,'Executando','Sucesso')
        send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Realizando conexao com o servidor ' + server,'running')
        for i in range(3):
            try:
                connection = psycopg2.connect(host=server,database=database,port=port,user=username.decode(),password=password.decode())
                return connection
            except Exception as error:
                message = error ; sleep(3) ; continue
        log.send_sgl_log(str(message),'Executando','Falha')
        return None    

    def sql_query(self,connection,server,database,value_1=None,value_2=None):
        
        """ Realiza consulta no banco de dados SQL """

        if not database == 'FX':
            log.send_sgl_log('Realizando consulta no servidor ' + server,'Executando','Sucesso')
            send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Realizando consulta no servidor ' + server,'running')
        try:
            cursor = connection.cursor()
            if database == 'COS':
                values = cursor.execute("""SELECT * FROM 
                [COS].[VIEW_CARREGA_AD_URA]
                WHERE (SIGLA NOT LIKE 'IT%'AND SIGLA NOT LIKE 'IX%')
                AND SIGLA NOT IN (SELECT SIGLA FROM [COS].[VIEW_CARREGA_AD_URA] 
                WITH(NOLOCK) WHERE LEFT(SIGLA, 1) = 'D' 
                AND (ISNUMERIC(SUBSTRING(SIGLA, 2, 1)) = 1))
                ORDER BY MATRICULA DESC , SIGLA DESC""")
            elif database == 'FX':
                query = "SELECT TA39_RLCUOR.TP_UOR,TA39_RLCUOR.CD_UOR FROM dbcorporativoT.dbo.TA39_RLCUOR TA39_RLCUOR WITH(NOLOCK) WHERE TA39_RLCUOR.TP_UOR_RLN=" + value_1 + " AND TA39_RLCUOR.CD_UOR_RLN=" + value_2 + " AND TA39_RLCUOR.TP_RLC_UOR=1"
                values = cursor.execute(query).fetchall()          
            else:
                cursor.execute("""SELECT NM_UPN,
                NM_IP_PHONE, NM_DOMI, NM_USUA,
                LEFT(NM_IP_PHONE, 1)
                FROM TB_INFO_AD
                WHERE (NM_UPN NOT LIKE 'IT%' AND NM_UPN NOT LIKE 'IX%')
                AND NM_UPN NOT IN (SELECT NM_UPN FROM TB_INFO_AD
                WHERE LEFT(NM_UPN, 1) = 'D'
                AND (isnumeric(SUBSTRING(NM_UPN, 2, 1)) = true))""")
                values = cursor.fetchall()
            return values
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return None

    def close_connection(self,connection,server):
        
        """ Finaliza conexão com o banco de dados """

        log.send_sgl_log('Finalizando conexao com o servidor ' + server,'Executando','Sucesso')
        send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Finalizando conexao com o servidor ' + server,'running')
        try:
            connection.close()
            return True
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return False

    def report_header_creation(self,directory,file,header):     
        
        """ Cria documento .txt com cabeçalho """
        
        try:
            for path in directory:
                files = smbclient.listdir(path,'*.txt')
                if not file in files:
                    file_path = smbclient.open_file(path + file,mode='w',encoding='UTF-8')
                    file_path.write(header + '\n')
                    file_path.close()
            sleep(1)
            return True
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return False

    def report_generation(self,directory,file_name,values):     
    
        """ Gera relatorio """

        try:
            for path in directory:
                file = smbclient.open_file(path + file_name,mode='a',encoding='UTF-8')
                for value in values: file.write(value + '\n')
                file.close()
            return True
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return False       

    def treatment_company(self,company):

        """ De/Para a ser utilizado no campo Company. Para casos em que o conteúdo não for
        localizado na lista abaixo, manter o valor que retornou da consulta. """

        try:
            if company == 'AQUANIMA BRASIL LTDA'.upper() or company == 'AQUANIMA BRASIL LTDA.'.upper():
                return 'Santander Brasil'     
            elif company == 'AQUANIMA BRASIL LTDA.'.upper() or company == 'AQUANIMA BRASIL LTDA..'.upper():
                return 'Santander Brasil'   
            elif company == 'AquanimaBrasilLtda.'.upper() or company == 'AquanimaBrasilLtda..'.upper():
                return 'Santander Brasil'   
            elif company == 'ATUAL REC CRE MEIO DIGITAIS SA'.upper() or company == 'ATUAL REC CRE MEIO DIGITAIS SA.'.upper():
                return 'Santander Brasil'    
            elif company == 'Atual Rec CreMeio Digitais SA'.upper() or company == 'Atual Rec CreMeio Digitais SA.'.upper():
                return 'Santander Brasil'   
            elif company == 'BANCO RCI BRASIL S.A.'.upper() or company == 'BANCO RCI BRASIL S.A..'.upper():
                return 'Santander Brasil'  
            elif company == 'BANCO SANTANDER (BRASIL) S/A'.upper() or company == 'BANCO SANTANDER (BRASIL) S/A.'.upper():
                return 'Santander Brasil'    
            elif company == 'BANCO SANTANDER BRASIL (BRANCH'.upper() or company == 'BANCO SANTANDER BRASIL (BRANCH.'.upper():
                return 'Santander Brasil'
            elif company == 'Banco Santander Brasil S/A'.upper() or company == 'Banco Santander Brasil S/A.'.upper():
                return 'Santander Brasil'   
            elif company == 'BancoSantander(Brasil)S.A.'.upper() or company == 'BancoSantander(Brasil)S.A..'.upper():
                return 'Santander Brasil'     
            elif company == 'ESFERA FIDELIDADE S.A'.upper() or company == 'ESFERA FIDELIDADE S.A.'.upper():
                return 'Esfera Brasil'     
            elif company == 'PI Distrib Tit Valores Mob S/A'.upper() or company == 'PI Distrib Tit Valores Mob S/A.'.upper():
                return 'Santander Brasil'
            elif company == 'RETURN CAP SERV REC CRED S/A'.upper() or company == 'RETURN CAP SERV REC CRED S/A.'.upper():
                return 'Return'   
            elif company == 'SANTANDER BRASIL GEST RECURSOS'.upper() or company == 'SANTANDER BRASIL GEST RECURSOS.'.upper():
                return 'Santander Brasil'    
            elif company == 'SANTANDER HOLDING IMOBIL S.A.'.upper() or company == 'SANTANDER HOLDING IMOBIL S.A..'.upper():
                return 'Santander Brasil'   
            elif company == 'SantanderBrasilGestãodeRecurso'.upper() or company == 'SantanderBrasilGestãodeRecurso.'.upper():
                return 'Santander Brasil'  
            elif company == 'SantanderHoldingInmobiliaria,S'.upper() or company == 'SantanderHoldingInmobiliaria,S.'.upper():
                return 'Santander Brasil'    
            elif company == 'SX NEGOCIOS LTDA'.upper() or company == 'SX NEGOCIOS LTDA.'.upper():
                return 'Santander Brasil'
            elif company == 'TORO INVESTIMENTOS'.upper() or company == 'TORO INVESTIMENTOS.'.upper():
                return 'Toro Investimentos'   
            elif company == 'UNIVERSIA BRASIL S/A'.upper() or company == 'UNIVERSIA BRASIL S/A.'.upper():
                return 'Santander Brasil'     
            elif company == 'UniversiaBrasil,S.A.'.upper() or company == 'UniversiaBrasil,S.A..'.upper():
                return 'Santander Brasil'                             
            elif company == 'F1RST TECNOLOGIA E INOVACAO LT'.upper() or company == 'F1RST TECNOLOGIA E INOVACAO LT.'.upper():
                return 'F1rst Digital Services'   
            elif company == 'F1RSTTECNOLOGIAEINOVACAOLTDA'.upper() or company == 'F1RSTTECNOLOGIAEINOVACAOLTDA.'.upper():
                return 'F1rst Digital Services'    
            elif company == 'F1RSTTECNOLOGIAEINOVACAOLTDA.'.upper() or company == 'F1RSTTECNOLOGIAEINOVACAOLTDA..'.upper():
                return 'F1rst Digital Services'   
            elif company == 'Isban Brasil S.A.'.upper() or company == 'Isban Brasil S.A..'.upper():
                return 'F1rst Digital Services' 
            elif company == 'Produban Brasil Tec S Inf Ltda'.upper() or company == 'Produban Brasil Tec S Inf Ltda.'.upper():
                return 'F1rst Digital Services' 
            elif company == 'SANTANDER BRASIL TECNOLOG S.A.'.upper() or company == 'SANTANDER BRASIL TECNOLOG S.A..'.upper():
                return 'F1rst Digital Services'
            elif company == 'Santander Tec e Inovação LTDA'.upper() or company == 'Santander Tec e Inovação LTDA.'.upper():
                return 'F1rst Digital Services'   
            elif company == 'SantanderBrasilTecnologiaS.A'.upper() or company == 'SantanderBrasilTecnologiaS.A.'.upper():
                return 'F1rst Digital Services'     
            elif company == 'SantanderTecnologiaeInovaçãoLt'.upper() or company == 'SantanderTecnologiaeInovaçãoLt.'.upper():
                return 'F1rst Digital Services' 
            elif company == 'AUTTAR HUT PROCESSAMENTO DE DA'.upper() or company == 'AUTTAR HUT PROCESSAMENTO DE DA.'.upper():
                return 'Santander Brasil'
            elif company == 'AYMORE CRED.FIN.E INVEST.S/A'.upper() or company == 'AYMORE CRED.FIN.E INVEST.S/A.'.upper():
                return 'Santander Financiamentos'     
            elif company == 'AymoréCrédito,FinanciamentoeIn'.upper() or company == 'AymoréCrédito,FinanciamentoeIn.'.upper():
                return 'Santander Financiamentos'  
            elif company == 'Banco Hyndai Capital Brasil SA'.upper() or company == 'Banco Hyndai Capital Brasil SA.'.upper():
                return 'Santander Financiamentos'
            elif company == 'BANCO HYUNDAI CAP BRASIL SA'.upper() or company == 'BANCO HYUNDAI CAP BRASIL SA.'.upper():
                return 'Santander Financiamentos'
            elif company == 'Santander Financiamentos Brasil'.upper() or company == 'Santander Financiamentos Brasil.'.upper():
                return 'Santander Financiamentos'     
            elif company == 'WEBMOTORS S/A'.upper() or company == 'WEBMOTORS S/A.'.upper():
                return 'Santander Financiamentos'  
            elif company == 'WEBMOTORSS.A.'.upper() or company == 'WEBMOTORSS.A..'.upper():
                return 'Santander Financiamentos'                                      
            elif company == 'SANTANDER CACEIS BRAS DTVM SA'.upper() or company == 'SANTANDER CACEIS BRAS DTVM SA.'.upper():
                return 'Santander Caceis Brasil'  
            elif company == 'Santander Sec Serv Bra Dtvm SA'.upper() or company == 'Santander Sec Serv Bra Dtvm SA.'.upper():
                return 'Santander Caceis Brasil'    
            elif company == 'SantanderCaceisBrasilDistribui'.upper() or company == 'SantanderCaceisBrasilDistribui.'.upper():
                return 'Santander Caceis Brasil'
            elif company == 'Santander Securities Services Brasil'.upper() or company == 'Santander Securities Services Brasil.'.upper():
                return 'Santander Caceis Brasil'
            elif company == 'Santander Glob Tec Brasil Ltda'.upper() or company == 'Santander Glob Tec Brasil Ltda.'.upper():
                return 'Santander Digital Services Brasil'
            elif company == 'SANTANDER GLOBAL TECH AND OPER'.upper() or company == 'SANTANDER GLOBAL TECH AND OPER.'.upper():
                return 'Santander Digital Services Brasil'     
            elif company == 'SantanderGlobalTechnologyandOp'.upper() or company == 'SantanderGlobalTechnologyandOp.'.upper():
                return 'Santander Digital Services Brasil'  
            elif company == 'SantanderGlobalTechnologyBrasi'.upper() or company == 'SantanderGlobalTechnologyBrasi.'.upper():
                return 'Santander Digital Services Brasil'                     
            elif company == 'Santander Cor Camb Vlr Mob S.A'.upper() or company == 'Santander Cor Camb Vlr Mob S.A.'.upper():
                return 'GABPS Brasil'      
            elif company == 'SANTANDER COR SEG INV SERV S.A'.upper() or company == 'SANTANDER COR SEG INV SERV S.A.'.upper():
                return 'GABPS Brasil'
            elif company == 'SantanderCorretoradeSeguros,In'.upper() or company == 'SantanderCorretoradeSeguros,In.'.upper():
                return 'GABPS Brasil' 
            elif company == 'GCB Brasil'.upper() or company == 'GCB Brasil.'.upper():
                return 'SCIB Brasil'     
            elif company == 'Santander Brasil Asset DTVM'.upper() or company == 'Santander Brasil Asset DTVM.'.upper():
                return 'SCIB Brasil'  
            elif company == 'SCIB Brasil'.upper() or company == 'SCIB Brasil.'.upper():
                return 'SCIB Brasil'                               
            elif company == 'BEN BENEFÍCIOS E SERVIÇOS S.A.'.upper() or company == 'BEN BENEFÍCIOS E SERVIÇOS S.A..'.upper():
                return 'BEN Brasil'
            elif company == 'BENBenefícioseServiçosS.A.'.upper() or company == 'BENBenefícioseServiçosS.A..'.upper():
                return 'BEN Brasil'  
            elif company == 'ZURICH SANTANDER BR SEG PRE SA'.upper() or company == 'ZURICH SANTANDER BR SEG PRE SA.'.upper():
                return 'Zurich Santander Seguros Brasil'     
            elif company == 'ZURICH SANTANDER BRASIL'.upper() or company == 'ZURICH SANTANDER BRASIL.'.upper():
                return 'Zurich Santander Seguros Brasil' 
            elif company == 'SAM BR'.upper() or company == 'SAM BR.'.upper():
                return 'SAM BR'                       
            elif company == 'SANB PROMOTORA DE VENDAS E COB'.upper() or company == 'SANB PROMOTORA DE VENDAS E COB.'.upper():
                return 'SANB Brasil'
            elif company == 'BENBenefícioseServiçosInstitui'.upper() or company == 'BENBenefícioseServiçosInstitui.'.upper():
                return 'BEN Brasil'     
            elif company == 'SXTOOLSSOLUCOESESERVICOSCOMPLT'.upper() or company == 'SXTOOLSSOLUCOESESERVICOSCOMPLT.'.upper():
                return 'SX Tools'       
            elif company == 'SX TOOLS SOLUCOES E SERVICOS C'.upper() or company == 'SX TOOLS SOLUCOES E SERVICOS C.'.upper():
                return 'SX Tools'   
            elif company == 'TOOLS SOLUCOES E SERVICOS COMP'.upper() or company == 'TOOLS SOLUCOES E SERVICOS COMP.'.upper():
                return 'SX Tools'     
            elif company == 'TOOLSSOLUCOESESERVICOSCOMPLTDA'.upper() or company == 'TOOLSSOLUCOESESERVICOSCOMPLTDA.'.upper():
                return 'SX Tools'   
            elif company == 'SANTANDER DISTRIB TIT VALORES ' or company == 'SANTANDER DISTRIB TIT VALORES'.upper() or company == 'SANTANDER DISTRIB TIT VALORES.'.upper():
                return 'Santander Brasil'                                                                                
            else:
                return company
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return None

    def smb_connection(self,user,password,server):
        
        """ Realiza conexao smb """

        try:
            smbclient.ClientConfig(uuid.uuid4(),user,password)
            smbclient.register_session(server,user,password)
            return smbclient
        except:   
            try:    
                smbclient.ClientConfig(uuid.uuid4(),user,password,auth_protocol='ntlm')
                smbclient.register_session(server,user,password,auth_protocol='ntlm')
                return smbclient
            except:
                try:
                    smbclient.ClientConfig(uuid.uuid4(),user,password,auth_protocol='kerberos')
                    smbclient.register_session(server,user,password,auth_protocol='kerberos')
                    return smbclient
                except Exception as error:
                    print(str(error))                                  
                    log.send_sgl_log('Nao foi possivel se conectar com o servidor: ' + server,'Executando','Falha')
                    send_message_to_queue(self.config.get_rabbit_queue_status,'Executando','Nao foi possivel se conectar com o servidor: ' + server,'running') 
                    return None

    def rename_file(self,directory,name,rename):
        
        """ Renomeia o arquivo informado """

        try:
            for path in directory:
                file = smbclient.listdir(path,'*.txt')
                if name in file: 
                    smbclient.rename(path + name,path + rename)
                    log.send_sgl_log('Backup concluido em ' + path,'Executando','Sucesso') 
            return True
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return False

    def remove_file(self,directory,file):

        """ Remove o arquivo informado """

        try:
            for path in directory:
                files = smbclient.listdir(path,'*.bak')
                if file in files: 
                    smbclient.remove(path + file)
                    log.send_sgl_log('Arquivo removido em ' + path,'Executando','Sucesso') 
            return True
        except Exception as error:
            log.send_sgl_log(str(error),'Executando','Falha')
            return False         

def rabbit_connection(user,password,server,port):
            
    """ Realiza conexão com RabbitMQ """
    
    global rabbit_conn

    log.send_sgl_log('Conectando com o servidor ' + server,'Executando','Sucesso')
    for i in range(3):
        try:
            credentials = pika.PlainCredentials(user,password)
            parameters = pika.ConnectionParameters(host=server,port=port,credentials=credentials)
            rabbit_conn = pika.BlockingConnection(parameters) 
            return rabbit_conn 
        except Exception as error:
            message = error ; sleep(3) ; continue
    log.send_sgl_log(str(message),'Executando','Falha')
    return None

def send_message_to_queue(queue,state,message,status):
    
    """ Envia mensagem para fila  """

    global rabbit_conn, rabbit_id

    if rabbit_conn == None or rabbit_conn.is_closed: rabbit_conn = rabbit_connection(init_config.get_rabbit_user,init_config.get_rabbit_pass,init_config.get_rabbit_host,init_config.get_rabbit_port)

    log.send_sgl_log('Enviando mensagem para a fila ' + queue,'Executando','Sucesso') 
    try:      
        dataInput = {
        "idExecucao": rabbit_id,
        "status": status,
        "timestamp": str(round(time.time() * 1000)),
        "parametros": [{
            "name": state,
            "type": "string",
            "value": message
            }]
        }
        try:
            channel = rabbit_conn.channel()
            channel.queue_declare(queue=queue,durable=True,arguments={'x-dead-letter-exchange': '','x-dead-letter-routing-key': 'MQ.ENGINE.STATUS.DLQ'}) 
        except:
            channel = rabbit_conn.channel()
            channel.queue_declare(queue=queue,durable=True)
               
        channel.basic_publish(exchange='',routing_key=queue,body=json.dumps(dataInput))
        log.send_sgl_log('Mensagem enviada com sucesso','Executando','Sucesso')
        channel.close()
    except Exception as error:
        log.send_sgl_log(str(error),'Executando','Falha')
  
def receive_message_to_queue(queue):

    """ Recebe mensagem da fila """

    global rabbit_conn

    while True:

        try:

            def callback(ch,method,properties,message):

                global rabbit_id
                 
                log.send_sgl_log('Mensagem recebida com sucesso','Executando','Sucesso')

                log.send_sgl_log('Parametros de execucao: ' + str(message),'Executando','Sucesso')

                rabbit_id = message.decode()
                jresp = json.loads(rabbit_id)  
                rabbit_id = str(json.loads(jresp['idEngine']))
                parameters = jresp['parametros']
            
                for value in parameters:
                    if value['name'] == 'referencia':  
                        reference = int(float(value['value']))
                    elif value['name'] == 'variacao':
                        variation = int(float(value['value']))
                    elif value['name'] == 'destinatario':
                        destinatario = value['value']

                for retry in range(3):
                    report = Report()
                    execution = report.report_flow(reference,variation,destinatario)
                    if not execution:                   
                        if retry == 2:                  
                            log.send_sgl_log('Um problema ocorreu durante a execucao do IPA','Fim','Falha')
                            send_message_to_queue(report.config.get_rabbit_queue_status,'Concluido','Um problema ocorreu durante a execucao do IPA','failed')
                            log.send_elk_log_execution(False,1,report.config.get_user)
                        else:
                            continue    
                    else:
                        log.send_sgl_log('Execucao finalizada','Fim','Sucesso')  
                        send_message_to_queue(report.config.get_rabbit_queue_status,'Concluido','Execução finalizada com sucesso','completed') 
                        log.send_elk_log_execution(True,0,report.config.get_user) ; break
                log.send_sgl_log('Aguardando mensagem da fila ' + queue,'Executando','Sucesso')
                channel.close()
                        
            channel = rabbit_conn.channel()
            channel.queue_declare(queue=queue,durable=True)   
            channel.basic_consume(queue=queue,on_message_callback=callback,auto_ack=True)
            log.send_sgl_log('Aguardando mensagem da fila ' + queue,'Executando','Sucesso')
            channel.start_consuming()
        except pika.exceptions.ConnectionWrongStateError as error:
            message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
            log.send_sgl_log(message,'Executando','Falha')
            rabbit_conn = rabbit_connection(init_config.get_rabbit_user,init_config.get_rabbit_pass,init_config.get_rabbit_host,init_config.get_rabbit_port)
            if rabbit_conn == None: os._exit(0) 
            continue
        except pika.exceptions.ChannelWrongStateError as error:
            message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
            log.send_sgl_log(message,'Executando','Falha')            
            continue
        except Exception as error:
            message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
            log.send_sgl_log(message,'Executando','Falha')
            continue
                
def close_rabbit_connection(server):
        
    """ Finaliza conexão com RabbitMQ """

    global rabbit_conn

    log.send_sgl_log('Finalizando conexao com o servidor ' + server,'Executando','Sucesso')
    for i in range(3):
        try:
            rabbit_conn.close()
            return True
        except Exception as error:
            message = error ; sleep(3) ; continue
    log.send_sgl_log(str(message),'Executando','Falha')
    return False 

def start_execution(thread=None):  

    """ Inicia a execução dos serviços do RabbitMQ """

    global rabbit_conn
    
    while True:

        init_config = Config()

        try:
            log.send_sgl_log('Iniciando conexao com RabbitMQ','Executando','Sucesso') 
            if rabbit_connection(init_config.get_rabbit_user,init_config.get_rabbit_pass,init_config.get_rabbit_host,init_config.get_rabbit_port) == None: sleep(60) ; continue
            receive_message_to_queue(init_config.get_rabbit_queue_execute)    
        except Exception as error: 
            log.send_sgl_log(str(error),'Executando','Falha') ; sleep(60)
            continue

def starts_running_ipa():
    
    """ Realiza via thread a chamada do metodo para inicio da execucao """
    
    try:
        _thread.start_new_thread(start_execution,('start_execution',))
        return 'success'
    except Exception:
        return 'failure'

def reload_script(thread=None):
    
    """ Reinicia a execucao do script """
    
    os._exit(0)     
            
@app.route('/ipa/app-rel-func-itsm/health',methods=['GET'])
def checks_active_application():

    """ Utilizado pelo PAAS para checar se a aplicação esta operante """

    global start_exec
    
    try:
        if not start_exec : start_exec = True ; starts_running_ipa()
        return 'success'
    except Exception:
        return 'failure'

@app.route('/ipa/app-rel-func-itsm/reload',methods=['POST'])
def reload():
    
    """ Ativa o metodo de reestart do script """
    
    try:
        _thread.start_new_thread(reload_script,('reload_script',))
        return 'success'
    except Exception:
        return 'failure'    

#Start server
if __name__ == '__main__':

    """ Inicia o servidor """
    
    rep = Report()
    rep.report_flow(None,None,None)

    try:
        print('\nServidor ativo',flush=True)
        port = int(os.environ.get('$PORT',8080))
        serve(app,host='0.0.0.0',port=8080)
    except Exception as error:
        log.send_sgl_log(str(error),'Fim','Falha')
        os._exit(0)

